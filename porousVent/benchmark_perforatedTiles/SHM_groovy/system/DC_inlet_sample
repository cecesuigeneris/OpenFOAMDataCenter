// ---------------------------------------------------------------------//

// Sample a field on a patch and pull it out each outputTime, find the data in postprocessing folder


 rack_inlet_temp
    {
        type patchExpression;
        accumulations (
            weightedAverage
        );
        patches (
        
                            rack1B4CBD4A994E6797F70F5EF1F5863DB2_inlet  // add here all the rack inlet patch name (make sure it takes all the split section name if splitted)
                    
                            rackFA1BFEC6E1E22133740F019445868403_inlet  // add here all the rack inlet patch name (make sure it takes all the split section name if splitted)
                    
                            rack927D2E6888FD177A981C0A7DD98F9854_inlet  // add here all the rack inlet patch name (make sure it takes all the split section name if splitted)
                    
                            rackC65181F2388B717A2DFA3CA4F31EBB92_inlet  // add here all the rack inlet patch name (make sure it takes all the split section name if splitted)
                    
                            rack4A95D65ACB30A998A736CBDCEE88E685_inlet  // add here all the rack inlet patch name (make sure it takes all the split section name if splitted)
                    
                            rack854D7BA836DCDC8D61AD830338297BA9_inlet  // add here all the rack inlet patch name (make sure it takes all the split section name if splitted)
                    
                            rack0E1B92A4DE590895AB323DD8D1E9F921_inlet  // add here all the rack inlet patch name (make sure it takes all the split section name if splitted)
                    
                            rackEA7E369EEC67CD4825F99F786002F8BB_inlet  // add here all the rack inlet patch name (make sure it takes all the split section name if splitted)
                    
                            rackE1B88BE09859F2B90B67530927011F46_inlet  // add here all the rack inlet patch name (make sure it takes all the split section name if splitted)
                    
                            rack6F2FB4401216FB0BE5B3E9FA249DE9D5_inlet  // add here all the rack inlet patch name (make sure it takes all the split section name if splitted)
                    
                            rackCB8BB049ED5D9C7579939A35E238AE7C_inlet  // add here all the rack inlet patch name (make sure it takes all the split section name if splitted)
                    
                            rack7CE29452499711B0CDDF74AF35D57FA0_inlet  // add here all the rack inlet patch name (make sure it takes all the split section name if splitted)
                    
                            rackCFEA7F02580F13637EC4158DF376E6A1_inlet  // add here all the rack inlet patch name (make sure it takes all the split section name if splitted)
                    
                            rackEDC8F6013BD80A7E069B3B7DBF87465F_inlet  // add here all the rack inlet patch name (make sure it takes all the split section name if splitted)
                    
                            rack36DD04A52BFE5C6B041452059D458836_inlet  // add here all the rack inlet patch name (make sure it takes all the split section name if splitted)
                    
                            rackD902EEF5E6F996BB25E50FDE8FD1F62B_inlet  // add here all the rack inlet patch name (make sure it takes all the split section name if splitted)
                    
        );
        expression "T";
        verbose true;
	    outputControlMode   timeStep;
	    outputInterval  1;
    }

AHU_return_temp
    {
        type patchExpression;
        accumulations (
            weightedAverage
        );
        patches (
                                    acuF9CB05DA6465C302727AC2126F3ADC50_inlet //add here all the name of the AHU return patch name
                                    acu1385ECEC5AC66642155584A8F60EB282_inlet //add here all the name of the AHU return patch name
                                    acu58D3207FC902F3CCC0F4E3EA1FA1DBE2_inlet //add here all the name of the AHU return patch name
                	    );
        expression "T";
        verbose true;
	    outputControlMode   timeStep;
	    outputInterval  1;
    }


probes
    {
        type            probes;
        functionObjectLibs ("libsampling.so");
        enabled         true;
        outputControlMode   timeStep;
        outputInterval  1;

        probeLocations
        (
            ( 28 13.5 1.8 ) // outlet rack_01
            ( 28.8 13.5 1.8 ) // inlet rack_01

	    ( 28 15.3 1.8 ) // outlet rack_04
            ( 28.8 15.3 1.8 ) // inlet rack_04

 	    ( 30.200000000000003 13.5 1.8 ) // inlet rack_05
            ( 31 13.5 1.8 ) // outlet rack_05

	    ( 30.200000000000003 15.3 1.8 ) // inlet rack_08
            ( 31 15.3 1.8 ) // outlet rack_08

        );
	
        fields
        (
            T
	    p_rgh
        );

    }


// -------------------------------------------------------------------------------------------- //
